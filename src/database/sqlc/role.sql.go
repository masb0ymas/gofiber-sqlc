// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: role.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const countRole = `-- name: CountRole :one
SELECT COUNT(*) FROM "role" WHERE "deleted_at" IS NULL
`

func (q *Queries) CountRole(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRole)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM "role" WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, created_at, updated_at, deleted_at, name FROM "role" WHERE id = $1
`

func (q *Queries) GetRole(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, created_at, updated_at, deleted_at, name FROM "role" WHERE "deleted_at" IS NULL OFFSET $1 LIMIT $2
`

type GetRolesParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetRoles(ctx context.Context, arg GetRolesParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newRole = `-- name: NewRole :one
INSERT INTO "role" (name) VALUES ($1) RETURNING id, created_at, updated_at, deleted_at, name
`

func (q *Queries) NewRole(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, newRole, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE "role" SET name = $1 WHERE id = $2 RETURNING id, created_at, updated_at, deleted_at, name
`

type UpdateRoleParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole, arg.Name, arg.ID)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
	)
	return i, err
}
